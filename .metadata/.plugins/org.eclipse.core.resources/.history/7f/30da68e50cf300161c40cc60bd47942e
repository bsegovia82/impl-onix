package com.onix.modulo.servicio.mantenimiento.aplicacion;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;

import com.onix.modulo.dominio.aplicacion.OmsOpcione;
import com.onix.modulo.dominio.aplicacion.OmsOpcionesRole;
import com.onix.modulo.dominio.aplicacion.OmsRole;
import com.onix.modulo.eao.aplicacion.OmsRoleEAO;
import com.onix.modulo.librerias.exceptions.ErrorServicioNegocio;
import com.onix.modulo.librerias.exceptions.ErrorValidacionGeneral;
import com.onix.modulo.librerias.servicio.oyentes.AccionTransaccionalListener;
import com.onix.modulo.librerias.servicio.oyentes.AccionValidacionListener;
import com.onix.modulo.librerias.servicio.oyentes.AccionValidacionSimpleListener;
import com.onix.modulo.servicio.ServicioMantenedorControlAuditoria;

@Stateless
public class ServicioMantenedorRol extends ServicioMantenedorControlAuditoria<OmsRoleEAO, OmsRole, Long> {

	@EJB
	private OmsRoleEAO crud;

	@EJB
	private ServicioMantenedorOpcion servicioOpcion;

	@EJB
	private ServicioMantenedorOpcionRol servicioOpcionRol;

	@Override
	protected OmsRoleEAO getCrud() {
		return crud;
	}

	public List<OmsOpcione> listaOpcionesEjecutables(String pUsuario) {
		return servicioOpcion.listaOpcionesEjecutables(pUsuario);
	}

	private OmsOpcionesRole registrarPadres(OmsRole rol, OmsOpcione opcionRol)
			throws ErrorServicioNegocio, ErrorValidacionGeneral {
		OmsOpcionesRole opcionRolPdre = new OmsOpcionesRole();
		if (opcionRol != null) {
			opcionRolPdre.setAuditoria(rol.getAuditoria());
			opcionRolPdre
					.setObservacion("DESCRIPCION ASIGNACION: " + rol.getRol() + " - " + opcionRol.getDescripcion());
			opcionRolPdre.setEstado("A");
			opcionRolPdre.setFechaRegistro(new Date());
			opcionRolPdre.setIdRol(rol);
			opcionRolPdre.setPriOpcione(opcionRol);
			if (!existeRolOpcion(opcionRolPdre)) {
				servicioOpcionRol.guardarActualizar(opcionRolPdre);
			}
			return registrarPadres(rol, opcionRol.getModuloPadre());
		} else {

			return null;
		}
	}

	private boolean existeRolOpcion(OmsOpcionesRole opcionRolPdre) {
		return getCrud().verificarSiExisteRolOpcion(opcionRolPdre.getIdRol().getId(),
				opcionRolPdre.getPriOpcione().getId());
	}

	public OmsOpcione obtenerOpcionPorID(Long idOpcion) {
		return servicioOpcion.obtenerObjtoPK(idOpcion, OmsOpcione.class);
	}

	public List<OmsOpcione> listaOpcionesEjecutables(String pUsuario, String tipo) {

		return servicioOpcionRol.listaOpcionesEjecutablesRol(pUsuario, tipo);
	}

	public OmsRole buscarRolPorID(Long idRol) {
		return crud.obtenerObjetoPorPk(idRol, OmsRole.class);
	}

	@Override
	protected void cargarConfiguracionServicio() {
		addValidacionSimpleUpdateListener(new AccionValidacionSimpleListener<OmsRole, Long>() {

			@Override
			public void validacionDatos(OmsRole entidad) throws ErrorValidacionGeneral {
				if (entidad.getRol().length() < 3)
					throw new ErrorValidacionGeneral("La rol debe tener más de tres caracteres");

			}

		});

		addValidacionSimpleInsertListener(new AccionValidacionSimpleListener<OmsRole, Long>() {

			@Override
			public void validacionDatos(OmsRole entidad) throws ErrorValidacionGeneral {
				if (entidad.getRol().length() < 3)
					throw new ErrorValidacionGeneral("La rol debe tener más de tres caracteres");

			}
		});

		addValidacionTransaccionalInsertListener(new AccionValidacionListener<OmsRole, Long>() {

			@Override
			public void validacionTransaccional(OmsRole entidad) throws ErrorServicioNegocio {
				OmsRole rol = crud.obtenerObjetoPorCampoGenerico("rol", entidad.getRol(), OmsRole.class);
				if (rol != null)
					throw new ErrorServicioNegocio("El rol " + entidad.getRol() + ", ya se encuentra registrado");

			}
		});
		addValidacionTransaccionalUpdateListener(new AccionValidacionListener<OmsRole, Long>() {

			@Override
			public void validacionTransaccional(OmsRole entidad) throws ErrorServicioNegocio {
				OmsRole rol = crud.obtenerObjetoPorCampoGenerico("rol", entidad.getRol(), OmsRole.class);
				if (rol != null && !entidad.getId().equals(rol.getId()))
					throw new ErrorServicioNegocio("El rol " + entidad.getRol() + ", ya se encuentra registrado");

			}

		});

		addPostInsertListener(new AccionTransaccionalListener<OmsRole, Long>() {

			@Override
			public void controlTransaccional(OmsRole entidad) throws ErrorServicioNegocio, ErrorValidacionGeneral {
				List<OmsOpcionesRole> listaOpcionesRoles = entidad.getListaOpcionesRoles();
				if (listaOpcionesRoles != null && !listaOpcionesRoles.isEmpty())
					for (OmsOpcionesRole opcionRol : listaOpcionesRoles) {
						opcionRol.setAuditoria(entidad.getAuditoria());
						servicioOpcionRol.guardarActualizar(opcionRol);
						registrarPadres(entidad, opcionRol.getPriOpcione().getModuloPadre());
					}

			}
		});
	}

	public List<String> obtenerOpcionesAsignadasRol(Long lRol) {
		String lQuery = "select g.descripcion  from oms_opciones g " + "where g.id in ( "
				+ "select c.id_opcion from OMS_OPCIONES_ROLES c " + "where c.id_rol = :pRol and c.estado = 'A' ) "
				+ "and g.estado = 'A' " + "and g.modulo_padre is not null";
		HashMap<String, Object> lParametros = new HashMap<>();
		lParametros.put("pRol", lRol);
		return crud.ejecutarNativeQueryList(lQuery, lParametros, String.class);
	}

	public List<String> obtenerOpcionesPorAsignarRol(String lUsuario, Long lRol) {

		String lQuery = "select g.descripcion  from oms_opciones g " + "where g.id in ( "
				+ "select c.id_opcion from OMS_OPCIONES_ROLES c " + "where c.id_rol in ( " + "select a.id_rol  "
				+ "from OMS_USUARIOS_ROLES a,  OMS_USUARIOS b " + "where a.id_usuario = b.id "
				+ "and b.usuario = :pUsuario " + "and a.estado = 'A' " + "and b.estado = 'A' ) "
				+ "and c.estado = 'A' ) " + "and g.estado = 'A' " + "and g.modulo_padre is not null "
				+ "and g.id not in ( " + "select c.id_opcion from OMS_OPCIONES_ROLES c " + "where c.id_rol = :pRol "
				+ "and c.estado = 'A' )";

		HashMap<String, Object> lParametros = new HashMap<>();
		lParametros.put("pUsuario", lUsuario);
		lParametros.put("pRol", lRol);
		return crud.ejecutarNativeQueryList(lQuery, lParametros, String.class);
	}

	public void asigarOpciones(List<String> lOpcionesTransferidas) 
	{
	
		
		
	}

	public void inactivarOpciones(List<String> lOpcionesTransferidas) {
		
	}

}
